/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { AbsenceDTO } from "../models";
// @ts-ignore
import { AbsenceRequest } from "../models";
// @ts-ignore
import { ResultResponse } from "../models";
/**
 * AbsencesControllerApi - axios parameter creator
 * @export
 */
export const AbsencesControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {AbsenceRequest} absenceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAbsence: async (
      absenceRequest: AbsenceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'absenceRequest' is not null or undefined
      assertParamExists("createAbsence", "absenceRequest", absenceRequest);
      const localVarPath = `/absences`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        absenceRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbsence: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteAbsence", "id", id);
      const localVarPath = `/absences/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsences: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/absences`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AbsencesControllerApi - functional programming interface
 * @export
 */
export const AbsencesControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    AbsencesControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {AbsenceRequest} absenceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAbsence(
      absenceRequest: AbsenceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbsenceDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAbsence(
        absenceRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAbsence(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAbsence(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbsences(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<AbsenceDTO>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAbsences(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AbsencesControllerApi - factory interface
 * @export
 */
export const AbsencesControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AbsencesControllerApiFp(configuration);
  return {
    /**
     *
     * @param {AbsenceRequest} absenceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAbsence(
      absenceRequest: AbsenceRequest,
      options?: any,
    ): AxiosPromise<AbsenceDTO> {
      return localVarFp
        .createAbsence(absenceRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbsence(id: number, options?: any): AxiosPromise<ResultResponse> {
      return localVarFp
        .deleteAbsence(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsences(options?: any): AxiosPromise<Array<AbsenceDTO>> {
      return localVarFp
        .getAbsences(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AbsencesControllerApi - object-oriented interface
 * @export
 * @class AbsencesControllerApi
 * @extends {BaseAPI}
 */
export class AbsencesControllerApi extends BaseAPI {
  /**
   *
   * @param {AbsenceRequest} absenceRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbsencesControllerApi
   */
  public createAbsence(
    absenceRequest: AbsenceRequest,
    options?: AxiosRequestConfig,
  ) {
    return AbsencesControllerApiFp(this.configuration)
      .createAbsence(absenceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbsencesControllerApi
   */
  public deleteAbsence(id: number, options?: AxiosRequestConfig) {
    return AbsencesControllerApiFp(this.configuration)
      .deleteAbsence(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbsencesControllerApi
   */
  public getAbsences(options?: AxiosRequestConfig) {
    return AbsencesControllerApiFp(this.configuration)
      .getAbsences(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
