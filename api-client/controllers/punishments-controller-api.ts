/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { BanRequest } from "../models";
// @ts-ignore
import { CreateUnbanRequest } from "../models";
// @ts-ignore
import { ResponsePageUnbanRequestDTO } from "../models";
// @ts-ignore
import { ResultResponse } from "../models";
// @ts-ignore
import { TempBanRequest } from "../models";
// @ts-ignore
import { TempMuteRequest } from "../models";
// @ts-ignore
import { UnMuteRequest } from "../models";
// @ts-ignore
import { UnbanRequestDTO } from "../models";
// @ts-ignore
import { UpdateUnbanRequest } from "../models";
/**
 * PunishmentsControllerApi - axios parameter creator
 * @export
 */
export const PunishmentsControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBan: async (
      banRequest: BanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'banRequest' is not null or undefined
      assertParamExists("createBan", "banRequest", banRequest);
      const localVarPath = `/punishments/ban`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        banRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIPBan: async (
      banRequest: BanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'banRequest' is not null or undefined
      assertParamExists("createIPBan", "banRequest", banRequest);
      const localVarPath = `/punishments/ipban`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        banRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TempBanRequest} tempBanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTempBan: async (
      tempBanRequest: TempBanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tempBanRequest' is not null or undefined
      assertParamExists("createTempBan", "tempBanRequest", tempBanRequest);
      const localVarPath = `/punishments/tempban`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tempBanRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TempMuteRequest} tempMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTempMute: async (
      tempMuteRequest: TempMuteRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tempMuteRequest' is not null or undefined
      assertParamExists("createTempMute", "tempMuteRequest", tempMuteRequest);
      const localVarPath = `/punishments/tempmute`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tempMuteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateUnbanRequest} createUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUnbanRequest: async (
      createUnbanRequest: CreateUnbanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUnbanRequest' is not null or undefined
      assertParamExists(
        "createUnbanRequest",
        "createUnbanRequest",
        createUnbanRequest,
      );
      const localVarPath = `/punishments/unban/request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUnbanRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UnMuteRequest} unMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMute: async (
      unMuteRequest: UnMuteRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'unMuteRequest' is not null or undefined
      assertParamExists("deleteMute", "unMuteRequest", unMuteRequest);
      const localVarPath = `/punishments/mute`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        unMuteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUnbanRequest: async (
      uuid: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists("deleteUnbanRequest", "uuid", uuid);
      const localVarPath = `/punishments/unban/request/{uuid}`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} perPage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnbanRequests: async (
      page: number,
      perPage: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getUnbanRequests", "page", page);
      // verify required parameter 'perPage' is not null or undefined
      assertParamExists("getUnbanRequests", "perPage", perPage);
      const localVarPath = `/punishments/unban/request/{page}/{perPage}`
        .replace(`{${"page"}}`, encodeURIComponent(String(page)))
        .replace(`{${"perPage"}}`, encodeURIComponent(String(perPage)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uuid
     * @param {UpdateUnbanRequest} updateUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUnbanRequest: async (
      uuid: string,
      updateUnbanRequest: UpdateUnbanRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uuid' is not null or undefined
      assertParamExists("updateUnbanRequest", "uuid", uuid);
      // verify required parameter 'updateUnbanRequest' is not null or undefined
      assertParamExists(
        "updateUnbanRequest",
        "updateUnbanRequest",
        updateUnbanRequest,
      );
      const localVarPath = `/punishments/unban/request/{uuid}`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUnbanRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PunishmentsControllerApi - functional programming interface
 * @export
 */
export const PunishmentsControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    PunishmentsControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBan(
      banRequest: BanRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBan(
        banRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createIPBan(
      banRequest: BanRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createIPBan(
        banRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {TempBanRequest} tempBanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTempBan(
      tempBanRequest: TempBanRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTempBan(
        tempBanRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {TempMuteRequest} tempMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTempMute(
      tempMuteRequest: TempMuteRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTempMute(
        tempMuteRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateUnbanRequest} createUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUnbanRequest(
      createUnbanRequest: CreateUnbanRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UnbanRequestDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createUnbanRequest(
          createUnbanRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UnMuteRequest} unMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMute(
      unMuteRequest: UnMuteRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMute(
        unMuteRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUnbanRequest(
      uuid: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUnbanRequest(uuid, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {number} page
     * @param {number} perPage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUnbanRequests(
      page: number,
      perPage: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponsePageUnbanRequestDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUnbanRequests(
          page,
          perPage,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uuid
     * @param {UpdateUnbanRequest} updateUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUnbanRequest(
      uuid: string,
      updateUnbanRequest: UpdateUnbanRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUnbanRequest(
          uuid,
          updateUnbanRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * PunishmentsControllerApi - factory interface
 * @export
 */
export const PunishmentsControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PunishmentsControllerApiFp(configuration);
  return {
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBan(
      banRequest: BanRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .createBan(banRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {BanRequest} banRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIPBan(
      banRequest: BanRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .createIPBan(banRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TempBanRequest} tempBanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTempBan(
      tempBanRequest: TempBanRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .createTempBan(tempBanRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TempMuteRequest} tempMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTempMute(
      tempMuteRequest: TempMuteRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .createTempMute(tempMuteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateUnbanRequest} createUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUnbanRequest(
      createUnbanRequest: CreateUnbanRequest,
      options?: any,
    ): AxiosPromise<UnbanRequestDTO> {
      return localVarFp
        .createUnbanRequest(createUnbanRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UnMuteRequest} unMuteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMute(
      unMuteRequest: UnMuteRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .deleteMute(unMuteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUnbanRequest(
      uuid: string,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .deleteUnbanRequest(uuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} perPage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnbanRequests(
      page: number,
      perPage: number,
      options?: any,
    ): AxiosPromise<ResponsePageUnbanRequestDTO> {
      return localVarFp
        .getUnbanRequests(page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uuid
     * @param {UpdateUnbanRequest} updateUnbanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUnbanRequest(
      uuid: string,
      updateUnbanRequest: UpdateUnbanRequest,
      options?: any,
    ): AxiosPromise<ResultResponse> {
      return localVarFp
        .updateUnbanRequest(uuid, updateUnbanRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PunishmentsControllerApi - object-oriented interface
 * @export
 * @class PunishmentsControllerApi
 * @extends {BaseAPI}
 */
export class PunishmentsControllerApi extends BaseAPI {
  /**
   *
   * @param {BanRequest} banRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public createBan(banRequest: BanRequest, options?: AxiosRequestConfig) {
    return PunishmentsControllerApiFp(this.configuration)
      .createBan(banRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {BanRequest} banRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public createIPBan(banRequest: BanRequest, options?: AxiosRequestConfig) {
    return PunishmentsControllerApiFp(this.configuration)
      .createIPBan(banRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TempBanRequest} tempBanRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public createTempBan(
    tempBanRequest: TempBanRequest,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .createTempBan(tempBanRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TempMuteRequest} tempMuteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public createTempMute(
    tempMuteRequest: TempMuteRequest,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .createTempMute(tempMuteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateUnbanRequest} createUnbanRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public createUnbanRequest(
    createUnbanRequest: CreateUnbanRequest,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .createUnbanRequest(createUnbanRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UnMuteRequest} unMuteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public deleteMute(
    unMuteRequest: UnMuteRequest,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .deleteMute(unMuteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public deleteUnbanRequest(uuid: string, options?: AxiosRequestConfig) {
    return PunishmentsControllerApiFp(this.configuration)
      .deleteUnbanRequest(uuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} perPage
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public getUnbanRequests(
    page: number,
    perPage: number,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .getUnbanRequests(page, perPage, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uuid
   * @param {UpdateUnbanRequest} updateUnbanRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PunishmentsControllerApi
   */
  public updateUnbanRequest(
    uuid: string,
    updateUnbanRequest: UpdateUnbanRequest,
    options?: AxiosRequestConfig,
  ) {
    return PunishmentsControllerApiFp(this.configuration)
      .updateUnbanRequest(uuid, updateUnbanRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
